Pintos is a simple OS framework for 80x86 architecture.
The pintos project will run in a program that simulates an 80x86 CPU.

1. Getting Started
I will build Pintos on a Linux machine in particular a Ubuntu machine, ubuntu-16.04.2-desktop-amd64.

1.1 Install Pintos

1.1.1 Install Prerequisites
1) Required: GCC
sudo apt-get update
sudo apt-get install build-essential

/** 
build-essential will install the compiler and a bunch of related/needed packages:
dpkg-dev (>= 1.13.5) Debian package development tools
g++ (>= 4:4.4.3)GNU C++ compiler
gcc (>= 4:4.4.3) GNU C compiler
libc6-dev Embedded GNU C Library: Development Libraries and Header Files
or libc-dev virtual package provided by libc6-dev
make An utility for Directing compilation.
Reference: http://packages.ubuntu.com/trusty/build-essential
*/

2) Required: GNU Binutils
sudo apt-get install binutils

3) Required: Perl
sudo apt-get install perl

4) Required: GNU make
sudo apt-get install make

5) Recommended: QEMU
sudo apt-get install qemu-system

6) Recommended: GDB
sudo apt-get install gdb

7) Recommended: X
Skip

8) Optional: Texinfo
Skip

9) Optional: TEX
Skip

10) Optional: VMWare Player
Skip

1.1.2 Install Pintos
1) Install qemu
a) Downlaod bochs-2.2.6.tar.gz from source forge
b) Run the command:
sudo usage: env SRCDIR=<srcdir> PINTOSDIR=<srcdir> DSTDIR=<dstdir> sh ./src/misc/bochs-2.2.6-build.sh
- where <srcdir> contains bochs-2.2.6.tar.gz
- and <pintosdir> is the root of the pintos source tree
- and <dstdir> is the installation prefix (e.g. /usr/local)
*** Received warning about X (I skipped it in step 1.1.1.7)

2) Install scripts from ‘src/utils’. 
Copy ‘backtrace’, ‘pintos’, ‘pintos-gdb’, ‘pintos-mkdisk’ into the default PATH.

sudo cp backtrack /usr/bin
...

3) Install ‘src/misc/gdb-macros’ in a public location.
a) Copy src/misc/gdb-macros to /home/dandanshi/Documents/pintos/gdb-macros
b) Open 'pintos-gdb’ in /usr/bin folder, change GDBMACROS to:
GDBMACROS = src/misc/gdb-macros to /home/dandanshi/Documents/pintos/gdb-macros
c) Test the installation by running pintos-gdb without any arguments. If it does not complain about missing ‘gdb-macros’, it is installed correctly.

4) Compile the remaining Pintos utilities by typing make in ‘src/utils’. 

*** Error with make. 
"Edit “Makefile” in the current directory and replace “LDFLAGS = -lm” by “LDLIBS = -lm” and redo the step. "
Reference: https://pintosiiith.wordpress.com/2012/09/13/install-pintos-with-qemu/

*** Error when run "pintos run alarm-multiple"
Use of literal control characters in variable names is deprecated

Install ‘squish-pty’ somewhere in PATH. 
To support VMware Player, install ‘squish-unix’. 
If your Perl is older than version 5.8.0, also install ‘setitimer-helper’; otherwise, it is unneeded.

5) Pintos should now be ready for use.

1.2 Build Pintos
1) cd to thread folder
2）run the command:
sudo pintos run alarm-multiple